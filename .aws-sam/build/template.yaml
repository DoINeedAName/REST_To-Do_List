AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'REST_To-Do_List

  Sample SAM Template for REST_To-Do_List

  '
Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 3
    Tracing: Active
  Api:
    TracingEnabled: true
Resources:
  ItemsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: ItemID
        Type: Number
      TableName: Items
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: API
      EndpointConfiguration:
        Type: REGIONAL
      Cors:
        AllowMethods: '''POST, GET, DELETE, PUT, OPTIONS'''
        AllowHeaders: '''Content-Type, X-Amz-Date, Authentication, Authorization,
          X-Api-Key, X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      Auth:
        DefaultAuthorizer: MyCognitoAuth
        AddDefaultAuthorizerToCorsPreflight: true
        Authorizers:
          MyCognitoAuth:
            Identity:
              Header: Authentication
            UserPoolArn:
              Fn::GetAtt:
              - CognitoUserPool
              - Arn
  CreateModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: ApiGateway
      ContentType: application/json
      Description: Schema for creating item
      Name: CreateItemModel
      Schema:
        $schema: http://json-schema.org/draft-04/schema#
        title: Create
        type: object
        properties:
          Title:
            type: string
          Details:
            type: string
          DueDate:
            type: string
          Completed:
            type: boolean
  LoginModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: ApiGateway
      ContentType: application/json
      Description: Schema for logging in user
      Name: LoginModel
      Schema:
        $schema: http://json-schema.org/draft-04/schema#
        title: Login
        type: object
        properties:
          email:
            type: string
          password:
            type: string
  RegisterModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: ApiGateway
      ContentType: application/json
      Description: Schema for registering a user
      Name: RegisterModel
      Schema:
        $schema: http://json-schema.org/draft-04/schema#
        title: Register
        type: object
        properties:
          username:
            type: string
          email:
            type: string
          password:
            type: string
  EmptyModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: ApiGateway
      ContentType: application/json
      Description: Default empty schema model
      Name: EmptyModel
      Schema:
        $schema: http://json-schema.org/draft-04/schema#
        title: Empty
        type: object
  UpdateModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: ApiGateway
      ContentType: application/json
      Description: Schema for updating item
      Name: UpdateItem
      Schema:
        $schema: http://json-schema.org/draft-04/schema#
        title: Update
        type: object
        properties:
          title:
            type: string
          titleValue:
            type: string
          details:
            type: string
          detailsValue:
            type: string
          dueDate:
            type: string
          dueDateValue:
            type: string
          completed:
            type: string
          completedValue:
            type: string
  CreateMethodDocPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: METHOD
        Method: POST
        Path: /items
      Properties: '{"tags": ["items"], "description": "Method to create item"}'
      RestApiId:
        Ref: ApiGateway
  ReadMethodDocPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: METHOD
        Method: GET
        Path: /items
      Properties: '{"tags": ["items"], "description": "Method to read one item with
        query or all without query"}'
      RestApiId:
        Ref: ApiGateway
  ReadQueryDoc:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: QUERY_PARAMETER
        Path: /items
        Method: GET
        Name: itemId
      Properties: '{"Description": "ID of item used for searching."}'
      RestApiId:
        Ref: ApiGateway
  UpdateMethodDocPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: METHOD
        Method: PUT
        Path: /items
      Properties: '{"tags": ["items"], "description": "Method to update an item"}'
      RestApiId:
        Ref: ApiGateway
  UpdateQueryDoc:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: QUERY_PARAMETER
        Path: /items
        Method: PUT
        Name: itemId
      Properties: '{"Description": "ID of item used for searching."}'
      RestApiId:
        Ref: ApiGateway
  DeleteMethodDocPart:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: METHOD
        Method: DELETE
        Path: /items
      Properties: '{"tags": ["items"], "description": "Method to delete an item"}'
      RestApiId:
        Ref: ApiGateway
  DeleteQueryDoc:
    Type: AWS::ApiGateway::DocumentationPart
    Properties:
      Location:
        Type: QUERY_PARAMETER
        Path: items
        Method: DELETE
        Name: itemId
      Properties: '{"Description": "ID of item used for searching."}'
      RestApiId:
        Ref: ApiGateway
  DocVersion:
    Type: AWS::ApiGateway::DocumentationVersion
    Properties:
      Description: Initial version
      DocumentationVersion: v1.0
      RestApiId:
        Ref: ApiGateway
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: To-Do-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
      - Name: email
        Required: true
      - Name: role
        Required: false
        Mutable: true
        AttributeDataType: String
      AutoVerifiedAttributes:
      - email
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      ClientName: To-Do-UserPoolClient
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_CUSTOM_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      EnableTokenRevocation: true
      SupportedIdentityProviders:
      - COGNITO
      CallbackURLs:
      - https://holmesglen.edu.au/
      LogoutURLs:
      - https://holmesglen.edu.au/
      AllowedOAuthFlows:
      - implicit
      AllowedOAuthScopes:
      - aws.cognito.signin.user.admin
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
      - address
      - nickname
      - birthdate
      - phone_number
      - email
      - phone_number_verified
      - email_verified
      - picture
      - family_name
      - preferred_username
      - gender
      - profile
      - given_name
      - zoneinfo
      - locale
      - updated_at
      - middle_name
      - website
      - name
      - custom:role
      WriteAttributes:
      - address
      - nickname
      - birthdate
      - phone_number
      - email
      - picture
      - family_name
      - preferred_username
      - gender
      - profile
      - given_name
      - zoneinfo
      - locale
      - updated_at
      - middle_name
      - website
      - name
  PoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: todolist
      UserPoolId:
        Ref: CognitoUserPool
  ReadItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ReadItemFunction
      Handler: readItem.handler
      Role: arn:aws:iam::998203903345:role/LabRole
      Architectures:
      - x86_64
      Events:
        readItem:
          Type: Api
          Properties:
            Path: /items
            Method: get
            RequestParameters:
            - method.request.querystring.itemId
            RestApiId:
              Ref: ApiGateway
    Metadata:
      SamResourceId: ReadItemFunction
  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UpdateItemFunction
      Handler: updateItem.handler
      Role: arn:aws:iam::998203903345:role/LabRole
      Architectures:
      - x86_64
      Events:
        UpdateItem:
          Type: Api
          Properties:
            Path: /items
            Method: put
            RequestParameters:
            - method.request.querystring.itemId
            RestApiId:
              Ref: ApiGateway
    Metadata:
      SamResourceId: UpdateItemFunction
  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DeleteItemFunction
      Handler: deleteItem.handler
      Role: arn:aws:iam::998203903345:role/LabRole
      Architectures:
      - x86_64
      Events:
        DeleteItem:
          Type: Api
          Properties:
            Path: /items
            Method: delete
            RequestParameters:
            - method.request.querystring.itemId
            RestApiId:
              Ref: ApiGateway
    Metadata:
      SamResourceId: DeleteItemFunction
  CreateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreateItemFunction
      Handler: createItem.handler
      Role: arn:aws:iam::998203903345:role/LabRole
      Architectures:
      - x86_64
      Events:
        CreateItem:
          Type: Api
          Properties:
            Path: /items
            Method: post
            RestApiId:
              Ref: ApiGateway
    Metadata:
      SamResourceId: CreateItemFunction
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: AuthFunction
      Handler: auth.handler
      Role: arn:aws:iam::998203903345:role/LabRole
      Architectures:
      - x86_64
      Events:
        Login:
          Type: Api
          Properties:
            Path: /items/login
            Method: post
            RestApiId:
              Ref: ApiGateway
        LogOut:
          Type: Api
          Properties:
            Path: /items/logout
            Method: post
            RestApiId:
              Ref: ApiGateway
        Register:
          Type: Api
          Properties:
            Path: /items/register
            Method: post
            RestApiId:
              Ref: ApiGateway
        Refresh:
          Type: Api
          Properties:
            Path: /items/refresh
            Method: post
            RestApiId:
              Ref: ApiGateway
    Metadata:
      SamResourceId: AuthFunction
  RoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: RoleFunction
      Handler: roleManager.handler
      MemorySize: 256
      Role: arn:aws:iam::998203903345:role/LabRole
      Architectures:
      - x86_64
      Events:
        SetRole:
          Type: Api
          Properties:
            Path: /items/roleManager
            Method: post
            RestApiId:
              Ref: ApiGateway
    Metadata:
      SamResourceId: RoleFunction
